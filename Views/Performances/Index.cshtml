@model IEnumerable<EPMSAppDemo.Models.Performance>

@{
    ViewBag.Title = "Performances";
}

<style>
    .paginate_button {
        cursor: pointer;
        font-size: large;
        color: black;
    }

    th {
        cursor: pointer;
    }
</style>
<!-- DataTables CSS -->
<link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css">

<!-- jQuery -->
<script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.2.min.js"></script>

<!-- DataTables -->
<script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js"></script>

<h2>Performances</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table id="table" class="table table-condensed table-hover table-striped">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Justification)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Aims)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Grading)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Employee.FirstName)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Justification)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Aims)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Grading)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Employee.FirstName)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">


    //$('#approveButton').click(function () {
    //    if (window.confirm("Are you sure you want to approve?")) {
    //        return true;
    //    }
    //    return false;
    //});

    $(document).ready(function () {
        $('#table_info').hide();
        //$('#table_length').hide();
    });

        //function to show/hide the descriptions that have too much text
    $("table tr td:nth-child(1)").each(function (index) {
        //grab the text within the description
        var description = $(this).html().toString();
        //counter to track the number of times clicked
        var clickCount = 0;
        //if the length is too long then we have to cut it down
        if (description.length > 100) {
            $(this).addClass("pointer");
            $(this).prop('title', 'Read More');
            $(this).html(description.substring(0, 60) + "...")

            if ($(this).click(function () {
                clickCount++;
                    var as = document.getElementById('table');
                //var row = as.rows[index + 1];
                if (Math.abs(clickCount) % 2 == 1) {
                $(this).prop('title', 'Read Less');

                 $(this).html(description)
                //row.cells[2].innerHTML = description;
            } else if (clickCount % 2 == 0) {
                $(this).prop('title', 'Read More');
                 $(this).html(description.substring(0, 60) + "...")
                //row.cells[2].innerHTML = description.substring(0, 60) + "...";
            }
            }));

        }
    });

    //function to show/hide the descriptions that have too much text
    $("table tr td:nth-child(2)").each(function (index) {
        //grab the text within the description
        var description = $(this).html().toString();
        //counter to track the number of times clicked
        var clickCount = 0;
        //if the length is too long then we have to cut it down
        if (description.length > 100) {
            $(this).addClass("pointer");
            $(this).prop('title', 'Read More');
            $(this).html(description.substring(0, 60) + "...")

            if ($(this).click(function () {
                clickCount++;
                    var as = document.getElementById('table');
                //var row = as.rows[index + 1];
                if (Math.abs(clickCount) % 2 == 1) {
                $(this).prop('title', 'Read Less');

                 $(this).html(description)
                //row.cells[2].innerHTML = description;
            } else if (clickCount % 2 == 0) {
                $(this).prop('title', 'Read More');
                 $(this).html(description.substring(0, 60) + "...")
                //row.cells[2].innerHTML = description.substring(0, 60) + "...";
            }
            }));

        }
    });



    //        //$("#button_" + index).click(function () {
    //        //    $("#button_" + index).hide();
    //        //    $("#button2_" + index).show();
    //        //    var as = document.getElementById('table');
    //        //    var row = as.rows[index + 1];
    //        //    alert(row.cells[2].innerHTML)
    //        //    row.cells[2].innerHTML = description;
    //        //});

    //        //$("#button2_" + index).click(function () {
    //        //    $("#button2_" + index).hide();
    //        //    $("#button_" + index).show();
    //        //    var as = document.getElementById('table');
    //        //    var row = as.rows[index + 1];
    //        //    row.cells[2].innerHTML = description.substring(0, 60) + "...";
    //        //});


    //    });

    //}



    jQuery.extend(jQuery.fn.dataTableExt.oSort, {

        "date-uk-pre": function (a) {

            if (a == null || a == "") {

                return 0;

            }

            var ukDatea = a.split('/');

            return (ukDatea[2] + ukDatea[1] + ukDatea[0]) * 1;

        },



        "date-uk-asc": function (a, b) {

            return ((a < b) ? -1 : ((a > b) ? 1 : 0));

        },



        "date-uk-desc": function (a, b) {

            return ((a < b) ? 1 : ((a > b) ? -1 : 0));

        }

    });

    $("#table").dataTable({

        columnDefs: [

{ type: 'date-uk', targets: 0 }

        ],

            "aaSorting": [[0, "desc"]]


        });




</script>
